{% extends 'base.html.twig' %}

{% block title %}Fight game{% endblock %}

{% block stylesheets %}
    {{ parent() }}

    <link rel="stylesheet" href="{{ asset('assets/css/game.css') }}">

    <link rel="stylesheet" href="{{ asset('libraries/bootstrap/dist/css/bootstrap.min.css') }}">
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script src="{{ asset('libraries/bootstrap/dist/js/bootstrap.min.js') }}"></script>

    {# <script src="{{ asset('assets/js/game.js') }}"></script> #}
{% endblock %}

{% block body %}
    <div class="sup-container">
        <div class="d-flex justify-content-between align-items-center w-75 mx-auto mt-3 players-info-container">
            <div style="width: 40%;">
                <div class="player1">Player 1</div>
                <div class="progress">
                    <div id="player1__bar" class="progress-bar" role="progressbar" aria-label="Basic example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
            </div>

            <div style="width: 40%;">
                <div class="player2">Player 2</div>

                <div class="progress">
                    <div id="player2__bar" class="progress-bar" role="progressbar" aria-label="Basic example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
            </div>
        </div>
    </div>

    <canvas id="canvas" width="1080" height="920"></canvas>

    <script>
        window.onload = () => 
        {
            let targetUserId = "{{ targetUser.id }}";
            let chosenShip = {
                id: "{{ chosenShip.id }}",
                name: "{{ chosenShip.name }}",
                img: "{{ chosenShip.img }}",
                acelerationCoefficient: parseFloat("{{ chosenShip.acelerationCoefficient }}"),
                turnCoeficient: parseFloat("{{ chosenShip.turnCoeficient }}"),
                live: parseFloat("{{ chosenShip.live }}"),
                maxSpeed: parseFloat("{{ chosenShip.maxSpeed }}"),
                projectile: {
                    id: "{{ chosenShip.projectile.id }}",
                    name: "{{ chosenShip.projectile.name }}",
                    speed: parseFloat("{{ chosenShip.projectile.speed }}"),
                    damage: parseFloat("{{ chosenShip.projectile.damage }}"),
                }
            }

            let play = false;

            canvas = document.getElementById("canvas");

            windowWidth = document.body.clientWidth;
            windowHeight = document.body.clientHeight;

            var conn = "";

            /**
            * JAVASCRIPT CLASSES FROM HERE
            * --------------------------------------------------------------------------------->
            */
            class Canvas 
            {
                constructor(canvasElement, windowWidth, windowHeight) {
                    this.canvas = canvasElement;
                    this.width = windowWidth;
                    this.height = windowHeight;

                    this.ships = [];
                }

                start() { 
                    this.canvas.width = this.width;
                    this.canvas.height = this.height;
                    this.context = this.canvas.getContext("2d");

                    document.body.insertBefore(this.canvas, document.body.childNodes[0]);

                    this.frameNo = 0;
                    this.interval = setInterval(updateGameArea, 20);

                    conn = new WebSocket('ws://192.168.1.35:8282/game');


                    // SOCKETS
                    conn.onopen = function(e) { 
                        console.log("conection stablished!");

                        conn.send(JSON.stringify({
                            "action": "waiting",
                            "session": {
                                id: sessionStorage.getItem("id"),
                                username: sessionStorage.getItem("username"),
                                state: sessionStorage.getItem("state"),
                            },
                            "player2": targetUserId,
                        }));
                    };

                    conn.onmessage = e => { 
                        let msg = JSON.parse(e.data);
            
                        switch (msg["action"]) {
                            case 'ready':
                                console.log("El otro jugador está listo");
                                play = true;

                                conn.send(JSON.stringify({
                                    "action": "ready",
                                    "session": {
                                        id: sessionStorage.getItem("id"),
                                        username: sessionStorage.getItem("username"),
                                        state: sessionStorage.getItem("state"),
                                    },
                                    "player2": targetUserId,
                                }));

                                break;

                            case 'readyAsWell':
                                console.log("El otro jugador está listo también");
                                play = true;
                                
                                break;

                            case 'frame':
                                player2.x = msg["player"]["x"];
                                player2.y = msg["player"]["y"];
                                player2.angle = msg["player"]["angle"];

                                player2.projectiles = [];

                                msg["player"]["projectiles"].forEach(projectile => {
                                    //console.log(projectile);
                                    player2.projectiles.push(new Projectile(projectile.x, projectile.y, projectile.angle));
                                });
                                
                                break;
                            
                            default:
                                console.log("No se recibió acción");

                                break;
                        }
                    };


                    // EVENT LISTENERS
                    window.addEventListener('keydown', function (e) {
                        e.preventDefault();

                        gameArea.keys = (gameArea.keys || []);
                        gameArea.keys[e.key] = (e.type == "keydown");
                    });

                    window.addEventListener('keyup', function (e) {
                        gameArea.keys[e.key] = (e.type == "keydown");
                    });
                }

                stop() {
                    clearInterval(this.interval);
                }

                clear() {
                    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
                }
            }
            

            class Ship
            {
                constructor(imagePath, width, height, x, y, live, acelerationCoefficient, turnCoeficient, maxSpeed, projectile) 
                {
                    this.img = new Image();
                    this.img.src = imagePath;

                    this.width = width;
                    this.height = height;
                    this.live = live;
                    this.speed = 0;
                    this.maxSpeed = maxSpeed;
                    this.aceleration = 0;
                    this.acelerationCoefficient = acelerationCoefficient;
                    this.angle = 0;
                    this.moveAngle = 0;
                    this.turnCoeficient = turnCoeficient;
                    this.x = x;
                    this.y = y;

                    this.projectile = projectile;

                    this.killed = false;

                    this.projectiles = [];
                    this.particles = [];
                }

                // RENDER SHIP
                update(ctx, player2) {
                    if (player1.speed < 0.25 * 10) player1.img.src = "../../media/images/millenary falcon/millenary falcon-stopped.png";
                    else if (player1.speed < 0.75 * 10) player1.img.src = "../../media/images/millenary falcon/millenary falcon.png";
                    else player1.img.src = "../../media/images/millenary falcon/millenary falcon-flying2.png";

                    this.newPos();

                    this.ctx = ctx;
                    this.ctx.save();
                    this.ctx.translate(this.x, this.y);
                    this.ctx.rotate(this.angle);
                    this.ctx.drawImage(this.img, this.width / -2, this.height / -2, this.width, this.height);
                    this.ctx.restore();

                    this.updateProjectiles();
                }

                newPos() {
                    this.angle += this.moveAngle * Math.PI / 180;
                    this.x += this.speed * Math.sin(this.angle);
                    this.y -= this.speed * Math.cos(this.angle);
                }


                // ATACK
                shoot() {
                    this.projectiles.push(new Projectile(this.x, this.y, this.angle, this.projectile.speed, this.projectile.damage));
                }


                // RENDER ALL PROJECTILES FROM SHIP
                updateProjectiles = () => {
                    this.projectiles.forEach(projectile => {
                        projectile.update(this.ctx);

                        if (projectile.hasImpatedWithLimits() || projectile.hasHit()) {
                            this.projectiles.splice(this.projectiles.indexOf(projectile), 1);

                            if (projectile.hasHit()) {
                                player2.live -= projectile.damage;

                                document.getElementById("player2__bar").style.width = player2.live+"%";
                                document.getElementById("player2__bar").setAttribute("aria-valuenow", player2.live);
                            }
                        }
                    });
                }
            }

            
            class Projectile {
                constructor(x, y, angle, speed, damage)
                {
                    this.speed = speed;
                    this.damage = damage;
                    this.x = x;
                    this.y = y;
                    this.width = 2;
                    this.height = 15;
                    this.angle = angle;
                }

                // RENDER PROJECTILE
                update(ctx) {
                    this.newPos();

                    this.ctx = ctx;
                    this.ctx.save();
                    this.ctx.translate(this.x, this.y);
                    this.ctx.rotate(this.angle);
                    ctx.fillStyle = "yellow";
                    ctx.fillRect(this.width / -2, this.height / -2, this.width, this.height);
                    this.ctx.restore();
                }

                newPos() {
                    this.x += this.speed * Math.sin(this.angle);
                    this.y -= this.speed * Math.cos(this.angle);
                }


                hasHit() {
                    if ((this.y >= (player2.y - player2.width / 2) && this.y <= (player2.y + player2.width / 2)) && (this.x >= (player2.x - player2.width / 2) && this.x < (player2.x + player2.width / 2))) {
                        return true;
                    }
                }

                hasImpatedWithLimits() {
                    if (this.x > canvas.width || this.y > canvas.height || this.x < 0 || this.y < 0) {
                        return true;
                    }
                }
            }



            class Particle {
                constructor(x, y, angle)
                {
                    this.speed = 5;
                    this.x = x;
                    this.y = y;
                    this.width = 5;
                    this.height = 5;
                    this.angle = angle;
                }

                update(ctx) {
                    this.ctx = ctx;

                    this.ctx.save();
                    this.ctx.translate(this.x, this.y);
                    ctx.fillStyle = "red";
                    ctx.fillRect(this.width / -2, this.height / -2, this.width, this.height);
                    this.ctx.restore();
                }

                newPos() {
                    this.x += this.speed * Math.sin(this.angle);
                    this.y -= this.speed * Math.cos(this.angle);
                }
            }
            


            /**
            * JAVASCRIPT CODE FROM HERE
            * --------------------------------------------------------------------------------->
            */
            let player1;
            let gameArea;

            function startGame() {
                player1 = new Ship("../../media/images/"+chosenShip.img, 60, 60, 225, 225, chosenShip.live, chosenShip.acelerationCoefficient, chosenShip.turnCoeficient, chosenShip.maxSpeed, chosenShip.projectile);
                player2 = new Ship("../../media/images/ship2/ship2.png", 60, 60, 425, 425, 100, 0.15, 3);

                gameArea = new Canvas(canvas, windowWidth, windowHeight);
                gameArea.start();
            }

            function updateGameArea() {
                gameArea.clear();

                player1.moveAngle = 0;
                player1.speed = 0;

                // if(rightPressed && player1.posX < getPageSize()[0] - player1.size) player1.move(+speedMoving, 0);
                // else if(leftPressed && player1.posX > 0) player1.move(-speedMoving, 0);

                if (gameArea.keys && gameArea.keys["ArrowLeft"]) player1.moveAngle = -(player1.turnCoeficient);
                if (gameArea.keys && gameArea.keys["ArrowRight"]) player1.moveAngle = player1.turnCoeficient;

                if (gameArea.keys && gameArea.keys["ArrowUp"]) {
                    if ( !(player1.x <= 0 + player1.width/2) && !(player1.x >= gameArea.width - player1.width/2) 
                        && !(player1.y <= 0 + player1.width/2) && !(player1.y >= gameArea.height - player1.width/2) ) { 
                            if (player1.aceleration <= player1.maxSpeed) {
                                player1.aceleration += player1.acelerationCoefficient;
                                player1.speed = Math.round(player1.aceleration);
                            }
                            else player1.speed = player1.maxSpeed;
                    }
                    else { 
                        player1.aceleration = 0;
                        player1.speed = 1;
                        player1.live -= 0.1;
                        document.getElementById("player1__bar").style.width = player1.live+"%";
                        document.getElementById("player1__bar").setAttribute("aria-valuenow", player1.live);
                    }
                } else {
                    if (player1.aceleration > 0) {
                        player1.aceleration -= player1.acelerationCoefficient;
                        player1.speed = Math.round(player1.aceleration);
                    }
                }
                
                if (gameArea.keys && gameArea.keys["ArrowDown"]) {
                    if ( !(player1.x <= 0 + player1.width/2) && !(player1.x >= gameArea.width - player1.width/2) 
                        && !(player1.y <= 0 + player1.width/2) && !(player1.y >= gameArea.height - player1.width/2) ) { 
                            if (player1.aceleration >= -player1.maxSpeed) {
                                player1.aceleration -= player1.acelerationCoefficient;
                                player1.speed = Math.round(player1.aceleration);
                            }
                            else player1.speed = -player1.maxSpeed;
                    }
                    else { 
                        player1.aceleration = 0;
                        player1.speed = -1;
                        player1.live -= 0.2;
                        document.getElementById("player1__bar").style.width = player1.live+"%";
                        document.getElementById("player1__bar").setAttribute("aria-valuenow", player1.live);
                    }
                } else {
                    if (player1.aceleration < 0) {
                        player1.aceleration += player1.acelerationCoefficient;
                        player1.speed = Math.round(player1.aceleration);
                    }
                }

                if (gameArea.keys && gameArea.keys[" "] && player1.projectiles.length < 3) player1.shoot();

                
                player1.update(gameArea.context);
                player2.update(gameArea.context);


                if (play == true) {
                    conn.send(JSON.stringify({
                        "action": "frame",
                        "session": {
                            id: sessionStorage.getItem("id"),
                            username: sessionStorage.getItem("username"),
                            state: sessionStorage.getItem("state"),
                        },
                        "player": {
                            id: targetUserId,
                            x: player1.x,
                            y: player1.y,
                            angle: player1.angle,
                            projectiles: player1.projectiles,
                        }
                    }))   
                }
            }

            startGame();



            /**
            * RESIZE CANVAS WHEN RESIZE WINDOW
            */
            window.addEventListener("resize", () => {
                gameArea.width = document.body.clientWidth;
                gameArea.height = document.body.clientHeight;
            });
        }
    </script>
{% endblock %}

